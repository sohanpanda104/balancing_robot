#include <AccelStepper.h>
#include <Wire.h>

// === Motor Pins ===
#define DIR_PIN_A 2
#define STEP_PIN_A 3
#define DIR_PIN_B 4
#define STEP_PIN_B 5

#define MOTOR_INTERFACE_TYPE 1

AccelStepper motorA(MOTOR_INTERFACE_TYPE, STEP_PIN_A, DIR_PIN_A);
AccelStepper motorB(MOTOR_INTERFACE_TYPE, STEP_PIN_B, DIR_PIN_B);

// === MPU6050 ===
const int MPU = 0x68;

float AccelY, AccelZ, GyroX;
float angle_accel = 0;
float angle_gyro = 0;
float angle_complementary = 0;

unsigned long prevTime;

// === PID Variables ===
float setpoint = 0.0;
float error, previous_error = 0;
float integral = 0;
float derivative;
float output;

// === PID Tuning ===
float Kp = 15.0;
float Ki = 0.0;
float Kd = 1.2;

void setup() {
  Wire.begin();
  Serial.begin(9600);

  // MPU6050: Wake up
  Wire.beginTransmission(MPU);
  Wire.write(0x6B);
  Wire.write(0);
  Wire.endTransmission(true);

  // Motors
  motorA.setMaxSpeed(1000);
  motorA.setAcceleration(1000);
  motorB.setMaxSpeed(1000);
  motorB.setAcceleration(1000);

  prevTime = millis();
}

void loop() {
  // === Read MPU6050 ===
  Wire.beginTransmission(MPU);
  Wire.write(0x3B); // ACCEL_YOUT_H
  Wire.endTransmission(false);
  Wire.requestFrom(MPU, 14, true);

  Wire.read(); Wire.read(); // Skip Ax
  int16_t rawAy = Wire.read() << 8 | Wire.read();
  int16_t rawAz = Wire.read() << 8 | Wire.read();
  Wire.read(); Wire.read(); // Skip Temp
  int16_t rawGx = Wire.read() << 8 | Wire.read();
  Wire.read(); Wire.read(); // Skip GyY, GyZ

  // === Convert Units ===
  AccelY = rawAy / 16384.0;
  AccelZ = rawAz / 16384.0;
  GyroX = rawGx / 131.0; // degrees/sec

  // === Accelerometer Angle ===
  angle_accel = atan2(AccelY, AccelZ) * 180 / PI;

  // === Time Delta ===
  unsigned long currentTime = millis();
  float dt = (currentTime - prevTime) / 1000.0;
  prevTime = currentTime;

  // === Gyroscope Integration ===
  angle_gyro += GyroX * dt;

  // === Complementary Filter ===
  float alpha = 0.98;
  angle_complementary = alpha * (angle_complementary + GyroX * dt) + (1 - alpha) * angle_accel;

  // === PID Controller ===
  error = setpoint - angle_complementary;
  integral += error * dt;
  derivative = (error - previous_error) / dt;
  output = Kp * error + Ki * integral + Kd * derivative;
  previous_error = error;

  // === Control Motors ===
  // Opposite directions to balance
  motorA.setSpeed(output);
  motorB.setSpeed(-output);

  motorA.runSpeed();
  motorB.runSpeed();

  // === Debugging ===
  Serial.print("Angle: ");
  Serial.print(angle_complementary);
  Serial.print(" | PID: ");
  Serial.println(output);

  // Optional: limit loop to ~100 Hz
  while (millis() - currentTime < 10);
}
